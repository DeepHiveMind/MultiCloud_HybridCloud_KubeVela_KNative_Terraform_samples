# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1alpha2
kind: WorkloadDefinition
metadata:
  name: microservice
  annotations:
    definition.oam.dev/description: "Describes a microservice combo Deployment with Service"
spec:
  definitionRef:
    name: deployment.apps
  schematic:
    cue:
      template: |
        output: {
        	// Deployment
        	apiVersion: "apps/v1"
        	kind:       "Deployment"
        	metadata: {
        		name:      context.name
        		namespace: "default"
        	}
        	spec: {
        		selector: matchLabels: {
        			"app": context.name
        		}
        		template: {
        			metadata: {
        				labels: {
        					"app":     context.name
        					"version": parameter.version
        				}
        			}
        			spec: {
        				serviceAccountName:            "default"
        				terminationGracePeriodSeconds: parameter.podShutdownGraceSeconds
        				containers: [{
        					name:  context.name
        					image: parameter.image
        					ports: [{
        						if parameter.containerPort != _|_ {
        							containerPort: parameter.containerPort
        						}
        						if parameter.containerPort == _|_ {
        							containerPort: parameter.servicePort
        						}
        					}]
        					if parameter.env != _|_ {
        						env: [
        							for k, v in parameter.env {
        								name:  k
        								value: v
        							},
        						]
        					}
        					resources: {
        						requests: {
        							if parameter.cpu != _|_ {
        								cpu: parameter.cpu
        							}
        							if parameter.memory != _|_ {
        								memory: parameter.memory
        							}
        						}
        					}
        				}]
        			}
        		}
        	}
        }
        // Service
        outputs: service: {
        	apiVersion: "v1"
        	kind:       "Service"
        	metadata: {
        		name: context.name
        		labels: {
        			"app": context.name
        		}
        	}
        	spec: {
        		type: "ClusterIP"
        		selector: {
        			"app": context.name
        		}
        		ports: [{
        			port: parameter.servicePort
        			if parameter.containerPort != _|_ {
        				targetPort: parameter.containerPort
        			}
        			if parameter.containerPort == _|_ {
        				targetPort: parameter.servicePort
        			}
        		}]
        	}
        }
        parameter: {
        	version:        *"v1" | string
        	image:          string
        	servicePort:    int
        	containerPort?: int
        	// +usage=Optional duration in seconds the pod needs to terminate gracefully
        	podShutdownGraceSeconds: *30 | int
        	env: [string]: string
        	cpu?:    string
        	memory?: string
        }
        
